<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline group="integrationframework" type="process">
  <branch basename="_ANONYMOUS_BRANCH_1">
    <segment>
      <node>
        <text-node>
          <description>Executes old, pipeline-based WorkflowComponents.</description>
        </text-node>
        <node-display width="2" x="1" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="RunWorkflowComponent">
    <segment>
      <node>
        <start-node call-mode="private" name="RunWorkflowComponent" secure="false"/>
        <node-display x="1" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="true"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="workflow/legacy/CreateFakeWorkflowComponentInstance.ds"/>
          <key-binding alias="ScriptLog" key="ScriptLog"/>
          <key-binding alias="CurrentWorkflowComponentInstance" key="WorkflowComponentInstance"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-2"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <stop-node name="ERROR"/>
              <node-display x="2" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node custom-name="Determine pipeline action" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <description>Determine pipeline action</description>
          <config-property key="Transactional" value="false"/>
          <key-binding alias="Action" key="To_0"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="CurrentWorkflowComponentInstance.getParameterValue('action')" key="From_0"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node custom-name="Logging messages" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="CurrentWorkflowComponentInstance.addMessage(&quot;Executing pipeline &quot; + Action,&quot;INFO&quot;)" key="From_0"/>
          <key-binding alias="DoIt" key="To_0"/>
          <key-binding alias="CurrentWorkflowComponentInstance.logMessageToComponent(&quot;Executing pipeline component &quot; + Action,&quot;INFO&quot;)" key="From_1"/>
          <key-binding alias="DoIt" key="To_1"/>
          <key-binding alias="DoIt" key="To_2"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="CurrentWorkflowComponentInstance.error(&quot;All still fine. just logging a stupid error.&quot;)" key="From_2"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-key="Action"/>
        <node-display x="0" y="1"/>
        <branch basename="b3" source-connector="ERROR">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <stop-node name="ERROR"/>
              <node-display x="0" y="2"/>
            </node>
          </segment>
        </branch>
        <branch basename="b4" source-connector="OK">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <end-node name="OK"/>
              <node-display x="-1" y="2"/>
            </node>
          </segment>
        </branch>
        <branch basename="b5" source-connector="SUSPEND">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <stop-node name="SUSPEND"/>
              <node-display x="1" y="2"/>
            </node>
          </segment>
        </branch>
        <branch basename="b6" source-connector="WARN">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <stop-node name="WARN"/>
              <node-display x="2" y="2"/>
            </node>
          </segment>
        </branch>
      </node>
    </segment>
  </branch>
</pipeline>
